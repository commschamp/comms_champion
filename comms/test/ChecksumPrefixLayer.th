//
// Copyright 2014 - 2021 (C). Alex Robenko. All rights reserved.
//
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at http://mozilla.org/MPL/2.0/.

#include <cstdint>
#include <cstddef>
#include <algorithm>
#include <iterator>
#include <iostream>
#include <iomanip>

#include "comms/comms.h"
#include "CommsTestCommon.h"

CC_DISABLE_WARNINGS()
#include "cxxtest/TestSuite.h"
CC_ENABLE_WARNINGS()

class ChecksumPrefixLayerTestSuite : public CxxTest::TestSuite
{
public:
    void test1();
    void test2();
    void test3();
    void test4();
    void test5();
    void test6();
    void test7();
    void test8();
    void test9();
    void test10();

private:

    typedef std::tuple<
        comms::option::MsgIdType<MessageType>,
        comms::option::IdInfoInterface,
        comms::option::BigEndian,
        comms::option::ReadIterator<const char*>,
        comms::option::WriteIterator<char*>,
        comms::option::LengthInfoInterface
    > BeTraits;

    typedef std::tuple<
        comms::option::MsgIdType<MessageType>,
        comms::option::IdInfoInterface,
        comms::option::BigEndian,
        comms::option::ReadIterator<const char*>,
        comms::option::WriteIterator<std::back_insert_iterator<std::vector<char> > >,
        comms::option::LengthInfoInterface
    > BeBackInsertTraits;

    typedef std::tuple<
        comms::option::MsgIdType<MessageType>,
        comms::option::IdInfoInterface,
        comms::option::LittleEndian,
        comms::option::ReadIterator<const char*>,
        comms::option::WriteIterator<char*>,
        comms::option::LengthInfoInterface
    > LeTraits;

    typedef std::tuple<
        comms::option::MsgIdType<MessageType>,
        comms::option::BigEndian
    > NonPolymorphicBigEndianTraits;

    typedef TestMessageBase<BeTraits> BeMsgBase;
    typedef TestMessageBase<LeTraits> LeMsgBase;
    typedef TestMessageBase<BeBackInsertTraits> BeBackInsertMsgBase;
    typedef comms::Message<NonPolymorphicBigEndianTraits> BeNonPolymorphicMessageBase;

    typedef BeMsgBase::Field BeField;
    typedef LeMsgBase::Field LeField;
    typedef BeBackInsertMsgBase::Field BeBackInsertField;

    typedef Message1<BeMsgBase> BeMsg1;
    typedef Message1<LeMsgBase> LeMsg1;
    typedef Message1<BeBackInsertMsgBase> BeBackInsertMsg1;
    typedef Message2<BeMsgBase> BeMsg2;
    typedef Message2<LeMsgBase> LeMsg2;
    typedef Message3<BeMsgBase> BeMsg3;
    typedef Message3<LeMsgBase> LeMsg3;
    typedef Message3<BeBackInsertMsgBase> BeBackInsertMsg3;

    typedef Message1<BeNonPolymorphicMessageBase> NonPolymorphicBeMsg1;
    typedef Message2<BeNonPolymorphicMessageBase> NonPolymorphicBeMsg2;

    template <typename TField, std::size_t TSize>
    using SyncField =
        comms::field::IntValue<
            TField,
            unsigned,
            comms::option::FixedLength<TSize>,
            comms::option::DefaultNumValue<0xabcd>
        >;

    template <typename TField>
    using SyncField2 = SyncField<TField, 2>;
    using BeSyncField2 = SyncField2<BeField>;
    using LeSyncField2 = SyncField2<LeField>;
    using BeBackInsertSyncField2 = SyncField2<BeBackInsertField>;

    template <typename TField, std::size_t TSize, std::size_t TOffset = 0>
    using SizeField =
        comms::field::IntValue<
            TField,
            unsigned,
            comms::option::FixedLength<TSize>,
            comms::option::NumValueSerOffset<static_cast<std::intmax_t>(TOffset)>
        >;

    template <typename TField>
    using SizeField20 = SizeField<TField, 2, 0>;
    using BeSizeField20 = SizeField20<BeField>;
    using LeSizeField20 = SizeField20<LeField>;
    using BeBackInsertSizeField20 = SizeField20<BeBackInsertField>;

    template <typename TField>
    using SizeField30 = SizeField<TField, 3, 0>;
    using BeSizeField30 = SizeField30<BeField>;
    using LeSizeField30 = SizeField30<LeField>;

    template <typename TField>
    using SizeField22 = SizeField<TField, 2, 2>;
    using BeSizeField22 = SizeField22<BeField>;
    using LeSizeField22 = SizeField22<LeField>;

    template <typename TField, std::size_t TLen>
    using IdField =
        comms::field::EnumValue<
            TField,
            MessageType,
            comms::option::FixedLength<TLen>
        >;

    template <typename TField>
    using IdField1 = IdField<TField, 1>;
    using BeIdField1 = IdField1<BeField>;
    using LeIdField1 = IdField1<LeField>;
    using BeBackInsertIdField1 = IdField1<BeBackInsertField>;

    template <typename TField>
    using IdField2 = IdField<TField, 2>;
    using BeIdField2 = IdField2<BeField>;
    using LeIdField2 = IdField2<LeField>;


    template <typename TField, std::size_t TLen>
    using ChecksumField =
        comms::field::IntValue<
            TField,
            typename comms::util::SizeToType<TLen>::Type
        >;


    template <typename TField>
    using ChecksumField1 = ChecksumField<TField, 1U>;
    using BeChecksumField1 = ChecksumField1<BeField>;
    using LeChecksumField1 = ChecksumField1<LeField>;
    using BeBackInsertChecksumField1 = ChecksumField1<BeBackInsertField>;

    template <typename TField, std::size_t TLen>
    using VersionField =
        comms::field::IntValue<
            TField,
            typename comms::util::SizeToType<TLen>::Type
        >;

    using BeVersionField1 = VersionField<BeField, 1U>;

    typedef std::tuple<
        BeVersionField1
    > ExtraVersionTransport;

    template <typename TOptions = comms::option::EmptyOption>
    struct ExtraTransportMessageBase : public
        comms::Message<
            TOptions,
            comms::option::ExtraTransportFields<ExtraVersionTransport>
        >
    {
        using Base =
            comms::Message<
                TOptions,
                comms::option::ExtraTransportFields<ExtraVersionTransport>
            >;
    public:
        COMMS_MSG_TRANSPORT_FIELDS_NAMES(version);
    };

    typedef ExtraTransportMessageBase<NonPolymorphicBigEndianTraits> BeNonPolymorphicExtraTransportMessageBase;
    typedef Message1<BeNonPolymorphicExtraTransportMessageBase> NonPolymorphicExtraTransportBeMsg1;
    typedef Message2<BeNonPolymorphicExtraTransportMessageBase> NonPolymorphicExtraTransportBeMsg2;


    template <typename TSyncField, typename TChecksumField, typename TSizeField, typename TIdField, typename TMessage>
    using ProtocolStack =
        comms::protocol::SyncPrefixLayer<
            TSyncField,
            comms::protocol::ChecksumPrefixLayer<
                TChecksumField,
                comms::protocol::checksum::BasicSum<>,
                comms::protocol::MsgSizeLayer<
                    TSizeField,
                    comms::protocol::MsgIdLayer<
                        TIdField,
                        TMessage,
                        AllMessages<TMessage>,
                        comms::protocol::MsgDataLayer<>
                    >
                >
            >
        >;

    template <typename TSyncField, typename TChecksumField, typename TSizeField, typename TIdField, typename TMessage>
    using ProtocolStackVerifyBefore =
        comms::protocol::SyncPrefixLayer<
            TSyncField,
            comms::protocol::ChecksumPrefixLayer<
                TChecksumField,
                comms::protocol::checksum::BasicSum<>,
                comms::protocol::MsgSizeLayer<
                    TSizeField,
                    comms::protocol::MsgIdLayer<
                        TIdField,
                        TMessage,
                        AllMessages<TMessage>,
                        comms::protocol::MsgDataLayer<>
                    >
                >,
                comms::option::ChecksumLayerVerifyBeforeRead
            >
        >;

    template <typename TSyncField, typename TSizeField, typename TIdField, typename TVersionField, typename TChecksumField, typename TMessage>
    using ProtocolStackVerifyBefore2 =
        comms::protocol::SyncPrefixLayer<
            TSyncField,
            comms::protocol::MsgSizeLayer<
                TSizeField,
                comms::protocol::MsgIdLayer<
                    TIdField,
                    TMessage,
                    AllMessages<TMessage>,
                    comms::protocol::TransportValueLayer<
                        TVersionField,
                        TMessage::TransportFieldIdx_version,
                        comms::protocol::ChecksumPrefixLayer<
                            TChecksumField,
                            comms::protocol::checksum::BasicSum<>,
                            comms::protocol::MsgDataLayer<>,
                            comms::option::ChecksumLayerVerifyBeforeRead
                        >
                    >
                >
            >
        >;

    template <typename TSyncField, typename TSizeField, typename TVersionField, typename TIdField, typename TChecksumField, typename TMessage>
    using ProtocolStackVerifyBefore3 =
        comms::protocol::SyncPrefixLayer<
            TSyncField,
            comms::protocol::MsgSizeLayer<
                TSizeField,
                comms::protocol::TransportValueLayer<
                    TVersionField,
                    TMessage::TransportFieldIdx_version,                
                    comms::protocol::MsgIdLayer<
                        TIdField,
                        TMessage,
                        AllMessages<TMessage>,
                        comms::protocol::ChecksumPrefixLayer<
                            TChecksumField,
                            comms::protocol::checksum::BasicSum<>,
                            comms::protocol::MsgDataLayer<>,
                            comms::option::ChecksumLayerVerifyBeforeRead
                        >
                    >
                >
            >
        >;        
};

void ChecksumPrefixLayerTestSuite::test1()
{
    static const char Buf[] = {
        static_cast<char>(0xab), static_cast<char>(0xcd), 0x06, 0x0, 0x3, MessageType1, 0x01, 0x02, static_cast<char>(0x3f)
    };

    static const std::size_t BufSize = std::extent<decltype(Buf)>::value;

    typedef
        ProtocolStack<
            BeSyncField2,
            BeChecksumField1,
            BeSizeField20,
            BeIdField1,
            BeMsgBase
        > Stack;

    Stack stack;

    auto msgPtr = commonReadWriteMsgTest(stack, &Buf[0], BufSize);
    TS_ASSERT(msgPtr);
    TS_ASSERT_EQUALS(msgPtr->getId(), MessageType1);
    auto& msg1 = dynamic_cast<BeMsg1&>(*msgPtr);
    TS_ASSERT_EQUALS(std::get<0>(msg1.fields()).value(), 0x0102);
}

void ChecksumPrefixLayerTestSuite::test2()
{
    LeMsg1 msg;
    std::get<0>(msg.fields()).value() = 0x0304;

    static const char ExpectedBuf[] = {
        static_cast<char>(0xcd), static_cast<char>(0xab), 0x0b, 0x4, 0x0, 0x0, MessageType1, 0x0, 0x04, 0x03
    };

    static const std::size_t BufSize = std::extent<decltype(ExpectedBuf)>::value;
    char buf[BufSize] = {0};

    typedef
        ProtocolStack<
            LeSyncField2,
            LeChecksumField1,
            LeSizeField30,
            LeIdField2,
            LeMsgBase
        > Stack;

    Stack stack;
    commonWriteReadMsgTest(stack, msg, buf, BufSize, &ExpectedBuf[0]);
}

void ChecksumPrefixLayerTestSuite::test3()
{
    static const char Buf[] = {
        static_cast<char>(0xab), static_cast<char>(0xcd), 0x07, 0x0, 0x3, MessageType1, 0x01, 0x02, static_cast<char>(0x3f)
    };

    static const std::size_t BufSize = std::extent<decltype(Buf)>::value;

    typedef
        ProtocolStack<
            BeSyncField2,
            BeChecksumField1,
            BeSizeField20,
            BeIdField1,
            BeMsgBase
        > Stack;

    Stack stack;

    auto msgPtr = commonReadWriteMsgTest(stack, &Buf[0], BufSize, comms::ErrorStatus::ProtocolError);
    TS_ASSERT(!msgPtr);
}

void ChecksumPrefixLayerTestSuite::test4()
{
    static const char Buf[] = {
        static_cast<char>(0xab), static_cast<char>(0xcd), 0x0, 0x6, 0x3, MessageType1, 0x01
    };

    static const std::size_t BufSize = std::extent<decltype(Buf)>::value;

    typedef
        ProtocolStack<
            BeSyncField2,
            BeChecksumField1,
            BeSizeField20,
            BeIdField1,
            BeMsgBase
        > Stack;

    Stack stack;

    auto msgPtr = commonReadWriteMsgTest(stack, &Buf[0], BufSize, comms::ErrorStatus::NotEnoughData);
    TS_ASSERT(!msgPtr);
}
//
void ChecksumPrefixLayerTestSuite::test5()
{
    LeMsg1 msg;
    std::get<0>(msg.fields()).value() = 0x0203;

    char buf[9] = {0};
    static const std::size_t BufSize = std::extent<decltype(buf)>::value;

    typedef
        ProtocolStack<
            LeSyncField2,
            LeChecksumField1,
            LeSizeField30,
            LeIdField2,
            LeMsgBase
        > Stack;

    Stack stack;
    commonWriteReadMsgTest(stack, msg, buf, BufSize, nullptr, comms::ErrorStatus::BufferOverflow);
}

void ChecksumPrefixLayerTestSuite::test6()
{
    static const char Buf[] = {
        static_cast<char>(0xab), static_cast<char>(0xcd), 0x6, 0x0, 0x3, MessageType1, 0x01, 0x02, static_cast<char>(0x3f)
    };

    static const std::size_t BufSize = std::extent<decltype(Buf)>::value;

    typedef
        ProtocolStack<
            BeBackInsertSyncField2,
            BeBackInsertChecksumField1,
            BeBackInsertSizeField20,
            BeBackInsertIdField1,
            BeBackInsertMsgBase
        > Stack;

    Stack stack;

    auto msgPtr = vectorBackInsertReadWriteMsgTest(stack, &Buf[0], BufSize);
    TS_ASSERT(msgPtr);
    TS_ASSERT_EQUALS(msgPtr->getId(), MessageType1);
    auto& msg1 = dynamic_cast<BeBackInsertMsg1&>(*msgPtr);
    TS_ASSERT_EQUALS(std::get<0>(msg1.fields()).value(), 0x0102);
}

void ChecksumPrefixLayerTestSuite::test7()
{
    static const char Buf[] = {
        static_cast<char>(0xab), static_cast<char>(0xcd), 0x6, 0x0, 0x3, MessageType1, 0x01, 0x02
    };

    static const std::size_t BufSize = std::extent<decltype(Buf)>::value;


    typedef
        ProtocolStackVerifyBefore<
            BeSyncField2,
            BeChecksumField1,
            BeSizeField20,
            BeIdField1,
            BeMsgBase
        > Stack;

    Stack stack;

    auto msgPtr = commonReadWriteMsgTest(stack, &Buf[0], BufSize);
    TS_ASSERT(msgPtr);
    TS_ASSERT_EQUALS(msgPtr->getId(), MessageType1);
    auto& msg = dynamic_cast<BeMsg1&>(*msgPtr);
    TS_ASSERT_EQUALS(std::get<0>(msg.fields()).value(), 0x0102);
}

void ChecksumPrefixLayerTestSuite::test8()
{
    static const char Buf[] = {
        static_cast<char>(0xab), static_cast<char>(0xcd), 0x06, 0x0, 0x3, MessageType1, 0x01, 0x02, static_cast<char>(0x3f)
    };

    static const std::size_t BufSize = std::extent<decltype(Buf)>::value;

    typedef
        ProtocolStack<
            BeSyncField2,
            BeChecksumField1,
            BeSizeField20,
            BeIdField1,
            BeNonPolymorphicMessageBase
        > Stack;

    Stack stack;

    NonPolymorphicBeMsg1 msg;
    commonReadWriteMsgDirectTest(stack, msg, &Buf[0], BufSize);
    TS_ASSERT_EQUALS(msg.field_value1().value(), 0x0102);

    Stack::AllFields fields;
    commonReadWriteMsgDirectTest(stack, fields, msg, &Buf[0], BufSize);
    TS_ASSERT_EQUALS(std::get<0>(fields).value(), 0xabcd);
    TS_ASSERT_EQUALS(std::get<1>(fields).value(), 6U);
    TS_ASSERT_EQUALS(std::get<2>(fields).value(), 3U);
    TS_ASSERT_EQUALS(std::get<3>(fields).value(), MessageType1);
    TS_ASSERT_EQUALS(std::get<4>(fields).value(), std::vector<std::uint8_t>(Buf + 6, Buf + 8));

    NonPolymorphicBeMsg2 msg2;
    commonReadWriteMsgDirectTest(stack, msg2, &Buf[0], BufSize, comms::ErrorStatus::InvalidMsgId);

    Stack::AllFields fields2;
    commonReadWriteMsgDirectTest(stack, fields2, msg2, &Buf[0], BufSize, comms::ErrorStatus::InvalidMsgId);
    TS_ASSERT_EQUALS(std::get<0>(fields2).value(), 0xabcd);
    TS_ASSERT_EQUALS(std::get<1>(fields2).value(), 6U);
    TS_ASSERT_EQUALS(std::get<2>(fields2).value(), 3U);
    TS_ASSERT_EQUALS(std::get<3>(fields2).value(), MessageType1);
}

void ChecksumPrefixLayerTestSuite::test9()
{
    static const char Buf[] = {
        static_cast<char>(0xab), static_cast<char>(0xcd), // sync
        0x0, 0x5, // size
        MessageType1, // id
        0x05, // version
        0x03, // checksum
        0x01, 0x02, // data
        static_cast<char>(0x3f) // garbage
    };

    static const std::size_t BufSize = std::extent<decltype(Buf)>::value;

    typedef
        ProtocolStackVerifyBefore2<
            BeSyncField2,
            BeSizeField20,
            BeIdField1,
            BeVersionField1,
            BeChecksumField1,
            BeNonPolymorphicExtraTransportMessageBase
        > Stack;

    Stack stack;

    NonPolymorphicExtraTransportBeMsg1 msg;
    commonReadWriteMsgDirectTest(stack, msg, &Buf[0], BufSize);
    TS_ASSERT_EQUALS(msg.field_value1().value(), 0x0102);
    TS_ASSERT_EQUALS(msg.transportField_version().value(), 0x5);
}

void ChecksumPrefixLayerTestSuite::test10()
{
    static const char Buf[] = {
        static_cast<char>(0xab), static_cast<char>(0xcd), // sync
        0x0, 0x5, // size
        0x05, // version        
        MessageType1, // id
        0x03, // checksum
        0x01, 0x02, // data
        static_cast<char>(0x3f) // garbage
    };

    static const std::size_t BufSize = std::extent<decltype(Buf)>::value;

    typedef
        ProtocolStackVerifyBefore3<
            BeSyncField2,
            BeSizeField20,
            BeVersionField1,
            BeIdField1,
            BeChecksumField1,
            BeNonPolymorphicExtraTransportMessageBase
        > Stack;

    Stack stack;

    NonPolymorphicExtraTransportBeMsg1 msg;
    commonReadWriteMsgDirectTest(stack, msg, &Buf[0], BufSize);
    TS_ASSERT_EQUALS(msg.field_value1().value(), 0x0102);
    TS_ASSERT_EQUALS(msg.transportField_version().value(), 0x5);
}

