//
// Copyright 2021 (C). Alex Robenko. All rights reserved.
//
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at http://mozilla.org/MPL/2.0/.

#include <cstdint>
#include <cstddef>
#include <algorithm>
#include <iterator>

#include "comms/comms.h"
#include "CommsTestCommon.h"

CC_DISABLE_WARNINGS()
#include "cxxtest/TestSuite.h"
CC_ENABLE_WARNINGS()

class CustomTransportValueLayerTestSuite : public CxxTest::TestSuite
{
public:
    void test1();
    void test2();
    void test3();

private:

    using BigEndianField = comms::Field<comms::option::BigEndian>;

    typedef std::tuple<
        comms::option::MsgIdType<MessageType>,
        comms::option::IdInfoInterface,
        comms::option::BigEndian,
        comms::option::ReadIterator<const char*>,
        comms::option::WriteIterator<char*>,
        comms::option::LengthInfoInterface
    > BeOptions;

    typedef std::tuple<
        comms::option::MsgIdType<MessageType>,
        comms::option::IdInfoInterface,
        comms::option::BigEndian,
        comms::option::ReadIterator<const char*>,
        comms::option::WriteIterator<std::back_insert_iterator<std::vector<char> > >,
        comms::option::LengthInfoInterface
    > BeBackInsertOptions;

    typedef std::tuple<
        comms::option::MsgIdType<MessageType>,
        comms::option::BigEndian
    > NonPolymorphicBigEndianTraits;

    using FieldBase = comms::Field<comms::option::BigEndian>;

    using VersionField =
        comms::field::IntValue<
            FieldBase,
            std::uint8_t,
            comms::option::DefaultNumValue<5>
        >;

    using FlagsField =
        comms::field::IntValue<
            FieldBase,
            std::uint8_t,
            comms::option::DefaultNumValue<5>
        >;

    typedef std::tuple<
        VersionField,
        FlagsField
    > ExtraTransport;

    template <typename TOptions = comms::option::EmptyOption>
    struct ExtraTransportMessageBase : public
        comms::Message<
            TOptions,
            comms::option::ExtraTransportFields<ExtraTransport>,
            comms::option::VersionInExtraTransportFields<0>
        >
    {
        using Base =
            comms::Message<
                TOptions,
                comms::option::ExtraTransportFields<ExtraTransport>,
                comms::option::VersionInExtraTransportFields<0>
            >;
    public:
        COMMS_MSG_TRANSPORT_FIELDS_NAMES(version, flags);
    };

    typedef ExtraTransportMessageBase<NonPolymorphicBigEndianTraits> BeNonPolymorphicMessageBase;

    typedef Message7<BeNonPolymorphicMessageBase> NonPolymorphicBeMsg1;

    using SizeField =
        comms::field::IntValue<
            FieldBase,
            std::uint16_t
        >;

    using IdField =
        comms::field::EnumValue<
            FieldBase,
            MessageType,
            comms::option::FixedLength<2>
        >;

    using ChcecksumField =
        comms::field::IntValue<
            FieldBase,
            std::uint8_t
        >;

    class VersionWithFlagsField : public
         comms::field::Bitfield<
            BigEndianField,
            std::tuple<
                comms::field::IntValue<BigEndianField, std::uint8_t, comms::option::FixedBitLength<4> >,
                comms::field::IntValue<BigEndianField, std::uint8_t, comms::option::FixedBitLength<4> >
            >        
        >
    {
        using Base = 
            comms::field::Bitfield<
                BigEndianField,
                std::tuple<
                    comms::field::IntValue<BigEndianField, std::uint8_t, comms::option::FixedBitLength<4> >,
                    comms::field::IntValue<BigEndianField, std::uint8_t, comms::option::FixedBitLength<4> >
                >        
            >;   
    public:
        COMMS_FIELD_MEMBERS_NAMES(version, flags);
    };

    template <
          typename TNextLayer,
          typename... TOptions>
    class CustomTransportValueLayer : public
        comms::protocol::TransportValueLayer<
            VersionWithFlagsField,
            std::tuple_size<ExtraTransport>::value,
            TNextLayer,
            comms::option::ExtendingClass<CustomTransportValueLayer<TNextLayer, TOptions...> >,
            TOptions...
        >
    {
        using Base = 
            comms::protocol::TransportValueLayer<
                VersionWithFlagsField,
                std::tuple_size<ExtraTransport>::value,
                TNextLayer,
                comms::option::ExtendingClass<CustomTransportValueLayer<TNextLayer, TOptions...> >,
                TOptions...
            >;

    public:

        using Field = typename Base::Field;

        template <typename TMsg>
        static void reassignFieldValue(TMsg& msg, const Field& field)
        {
            msg.transportField_version().value() = field.field_version().value();
            msg.transportField_flags().value() = field.field_flags().value();
        }  

        template <typename TMsg>
        static void prepareFieldForWrite(const TMsg& msg, Field& field)
        {
            field.field_version().value() = msg.transportField_version().value();
            field.field_flags().value() = msg.transportField_flags().value();
        }                  
    }; 

    template <
          typename TNextLayer,
          typename... TOptions>
    class CustomReassigningTransportValueLayer : public
        comms::protocol::TransportValueLayer<
            VersionWithFlagsField,
            std::tuple_size<ExtraTransport>::value,
            TNextLayer,
            comms::option::ExtendingClass<CustomReassigningTransportValueLayer<TNextLayer, TOptions...> >,
            TOptions...,
            comms::option::def::ProtocolLayerSuppressReadUntilDataSplitForcing
        >
    {
        using Base = 
            comms::protocol::TransportValueLayer<
                VersionWithFlagsField,
                std::tuple_size<ExtraTransport>::value,
                TNextLayer,
                comms::option::ExtendingClass<CustomReassigningTransportValueLayer<TNextLayer, TOptions...> >,
                TOptions...,
                comms::option::def::ProtocolLayerSuppressReadUntilDataSplitForcing
            >;

    public:

        using Field = typename Base::Field;

        template <typename TMsg>
        bool reassignFieldValueToMsg(const Field& field, TMsg* msgPtr)
        {
            static_cast<void>(msgPtr);
            // auto& destField = Base::nextLayer().nextLayer().pseudoField();
            // using DestFieldType = typename std::decay<decltype(destField)>::type;
            // destField = comms::field_cast<DestFieldType>(field);
            Base::nextLayer().nextLayer().pseudoField() = field;
            return true;
        }  

        template <typename TMsg>
        static void prepareFieldForWrite(const TMsg& msg, Field& field)
        {
            field.field_version().value() = msg.transportField_version().value();
            field.field_flags().value() = msg.transportField_flags().value();
        }                  
    };        

    template <typename TMessage>
    using BeforeIdProtocolStack =
        comms::protocol::MsgSizeLayer<
            SizeField,
            CustomTransportValueLayer<
                comms::protocol::MsgIdLayer<
                    IdField,
                    TMessage,
                    AllMessages<TMessage>,
                    comms::protocol::MsgDataLayer<>
                >            
            >
        >;


    template <typename TMessage, typename... TOpt>
    using AfterIdProtocolStack =
        comms::protocol::MsgSizeLayer<
            SizeField,
            comms::protocol::MsgIdLayer<
                IdField,
                TMessage,
                AllMessages<TMessage>,
                CustomTransportValueLayer<
                    comms::protocol::MsgDataLayer<>,
                    TOpt...
                >
            >
        >;

    template <typename TMessage>
    using BeforeIdWithChecksumProtocolStack =
        comms::protocol::MsgSizeLayer<
            SizeField,
            CustomReassigningTransportValueLayer<
                comms::protocol::MsgIdLayer<
                    IdField,
                    TMessage,
                    AllMessages<TMessage>,
                    CustomTransportValueLayer<
                        comms::protocol::ChecksumLayer<
                            ChcecksumField,
                            comms::protocol::checksum::BasicSum<>,
                            comms::protocol::MsgDataLayer<>
                        >,
                        comms::option::def::PseudoValue
                    >
                >         
            >
        >;        
};

void CustomTransportValueLayerTestSuite::test1()
{
    static const char Buf[] = {
        0x0, 0x7, 
        0x0, MessageType7,
        0x15, 
        0x01, 0x02, 0x03, 0x04
    };

    static const std::size_t BufSize = std::extent<decltype(Buf)>::value;

    using MsgBase = ExtraTransportMessageBase<BeOptions>;
    using Stack = AfterIdProtocolStack<MsgBase>;

    Stack stack;

    TS_ASSERT_EQUALS(stack.length(), 5U);

    auto msgPtr = commonReadWriteMsgTest(stack, &Buf[0], BufSize);
    TS_ASSERT(msgPtr);
    TS_ASSERT_EQUALS(msgPtr->getId(), MessageType7);
    TS_ASSERT_EQUALS(msgPtr->transportField_version().value(), 5U);
    TS_ASSERT_EQUALS(msgPtr->transportField_flags().value(), 0x1);

    auto& msg = dynamic_cast<Message7<MsgBase>&>(*msgPtr);
    TS_ASSERT_EQUALS(msg.field_value1().value(), 0x0102);
    TS_ASSERT(msg.field_value2().doesExist());
    TS_ASSERT_EQUALS(msg.field_value2().field().value(), 0x0304);
}

void CustomTransportValueLayerTestSuite::test2()
{
    static const char Buf[] = {
        0x0, 0x5, 
        0x14, 
        0x0, MessageType7,
        0x01, 0x02
    };

    static const std::size_t BufSize = std::extent<decltype(Buf)>::value;

    using MsgBase = ExtraTransportMessageBase<BeOptions>;
    using Stack = BeforeIdProtocolStack<MsgBase>;

    Stack stack;

    TS_ASSERT_EQUALS(stack.length(), 5U);

    auto msgPtr = commonReadWriteMsgTest(stack, &Buf[0], BufSize);
    TS_ASSERT(msgPtr);
    TS_ASSERT_EQUALS(msgPtr->getId(), MessageType7);
    TS_ASSERT_EQUALS(msgPtr->transportField_version().value(), 4U);
    TS_ASSERT_EQUALS(msgPtr->transportField_flags().value(), 0x1);

    auto& msg = dynamic_cast<Message7<MsgBase>&>(*msgPtr);
    TS_ASSERT_EQUALS(msg.field_value1().value(), 0x0102);
    TS_ASSERT(msg.field_value2().isMissing());
}

void CustomTransportValueLayerTestSuite::test3()
{
    static const char Buf[] = {
        0x0, 0x6, // size
        0x14, // versio + flags
        0x0, MessageType7, // id
        0x01, 0x02, // data
        0x03 // checksum
    };

    static const std::size_t BufSize = std::extent<decltype(Buf)>::value;

    using MsgBase = ExtraTransportMessageBase<BeOptions>;
    using Stack = BeforeIdWithChecksumProtocolStack<MsgBase>;

    Stack stack;

    TS_ASSERT_EQUALS(stack.length(), 6U);

    auto msgPtr = commonReadWriteMsgTest(stack, &Buf[0], BufSize);
    TS_ASSERT(msgPtr);
    TS_ASSERT_EQUALS(msgPtr->getId(), MessageType7);
    TS_ASSERT_EQUALS(msgPtr->transportField_version().value(), 4U);
    TS_ASSERT_EQUALS(msgPtr->transportField_flags().value(), 0x1);

    auto& msg = dynamic_cast<Message7<MsgBase>&>(*msgPtr);
    TS_ASSERT_EQUALS(msg.field_value1().value(), 0x0102);
    TS_ASSERT(msg.field_value2().isMissing());
}
